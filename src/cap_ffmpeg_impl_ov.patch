--- cap_ffmpeg_impl.hpp	2019-10-05 10:32:57.888980455 +0200
+++ cap_ffmpeg_impl_ov.hpp	2019-10-27 10:36:38.189727512 +0100
@@ -40,14 +40,24 @@
 //
 //M*/
 
-#include "cap_ffmpeg_api.hpp"
-#if !(defined(_WIN32) || defined(WINCE))
-# include <pthread.h>
-#endif
+/* ATTENTION:
+ *
+ * This file was generated from
+ *
+ * https://github.com/opencv/opencv/blob/master/modules/videoio/src/cap_ffmpeg_impl.hpp
+ * commit 9702987209a9a17ee2d0626c535d2b7bbc6ba1bc
+ *
+ * and applying the patches in cap_ffmpeg_impl_ov.patch
+ */
+
 #include <assert.h>
 #include <algorithm>
 #include <limits>
 
+#include <string>
+#include <octave/oct.h>
+#undef USE_AV_INTERRUPT_CALLBACK
+
 #ifndef __OPENCV_BUILD
 #define CV_FOURCC(c1, c2, c3, c4) (((c1) & 255) + (((c2) & 255) << 8) + (((c3) & 255) << 16) + (((c4) & 255) << 24))
 #endif
@@ -100,6 +110,15 @@
 #define CV_WARN(message) fprintf(stderr, "warning: %s (%s:%d)\n", message, __FILE__, __LINE__)
 #endif
 
+static int global_err;
+
+std::string get_last_err_msg ()
+{
+  char err_buf[80];
+  av_strerror (global_err, err_buf, 80);
+  return err_buf;
+}
+
 #if defined _WIN32
     #include <windows.h>
     #if defined _MSC_VER && _MSC_VER < 1900
@@ -472,9 +491,13 @@
 #endif
 }
 
+static bool capture_type_loaded = false;
 
-struct CvCapture_FFMPEG
+class CvCapture_FFMPEG: public octave_base_value
 {
+  public:
+    CvCapture_FFMPEG ();
+
     bool open( const char* filename );
     void close();
 
@@ -528,10 +551,38 @@
 #if USE_AV_INTERRUPT_CALLBACK
     AVInterruptCallbackMetadata interrupt_metadata;
 #endif
+
+  bool is_constant (void) const
+  {
+    return true;
+  }
+  bool is_defined (void) const
+  {
+    return true;
+  }
+
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+
+  void print (std::ostream & os, bool pr_as_read_syntax = false)
+  {
+    os << "CvCapture_FFMPEG:" << std::endl;
+    if (filename)
+      os << "  filename           = " << filename << std::endl;
+    os << "  get_total_frames() = " << get_total_frames() << std::endl;
+    os << "  get_duration_sec() = " << get_duration_sec() << std::endl;
+    os << "  get_fps()          = " << get_fps() << std::endl;
+    os << "  get_bitrate()      = " << get_bitrate() << std::endl;
+  }
 };
 
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(CvCapture_FFMPEG, "CvCapture_FFMPEG", "CvCapture_FFMPEG");
+
+CvCapture_FFMPEG::CvCapture_FFMPEG ()
+  : octave_base_value () { init (); };
+
 void CvCapture_FFMPEG::init()
 {
+    av_register_all();
     ic = 0;
     video_stream = -1;
     video_st = 0;
@@ -886,24 +937,26 @@
 #else
     av_dict_set(&dict, "rtsp_transport", "tcp", 0);
 #endif
-    int err = avformat_open_input(&ic, _filename, NULL, &dict);
+    global_err = avformat_open_input(&ic, _filename, NULL, &dict);
 #else
-    int err = av_open_input_file(&ic, _filename, NULL, 0, NULL);
+    global_err = av_open_input_file(&ic, _filename, NULL, 0, NULL);
 #endif
 
-    if (err < 0)
+//fprintf(stderr, "err = %i %s %i %i\n", global_err, icvFFMPEGErrStr(global_err), LIBAVUTIL_BUILD, CALC_FFMPEG_VERSION(52, 111, 0));
+
+    if (global_err < 0)
     {
         CV_WARN("Error opening file");
         CV_WARN(_filename);
         goto exit_func;
     }
-    err =
+    global_err =
 #if LIBAVFORMAT_BUILD >= CALC_FFMPEG_VERSION(53, 6, 0)
     avformat_find_stream_info(ic, NULL);
 #else
     av_find_stream_info(ic);
 #endif
-    if (err < 0)
+    if (global_err < 0)
     {
         CV_WARN("Could not find codec parameters");
         goto exit_func;
@@ -1159,6 +1212,8 @@
     AVCodecID codec_id = AV_CODEC_ID_NONE;
     const char* codec_fourcc = NULL;
 
+#if 0
+
     switch( property_id )
     {
     case CV_FFMPEG_CAP_PROP_POS_MSEC:
@@ -1203,7 +1258,7 @@
     default:
         break;
     }
-
+#endif
     return 0;
 }
 
@@ -1344,7 +1399,7 @@
 bool CvCapture_FFMPEG::setProperty( int property_id, double value )
 {
     if( !video_st ) return false;
-
+#if 0
     switch( property_id )
     {
     case CV_FFMPEG_CAP_PROP_POS_MSEC:
@@ -1372,14 +1427,19 @@
     default:
         return false;
     }
-
+#endif
     return true;
 }
 
 
 ///////////////// FFMPEG CvVideoWriter implementation //////////////////////////
-struct CvVideoWriter_FFMPEG
+static bool writer_type_loaded = false;
+
+class CvVideoWriter_FFMPEG: public octave_base_value
 {
+  public:
+    CvVideoWriter_FFMPEG ();
+
     bool open( const char* filename, int fourcc,
                double fps, int width, int height, bool isColor );
     void close();
@@ -1403,8 +1463,35 @@
     int               frame_idx;
     bool              ok;
     struct SwsContext *img_convert_ctx;
+
+    bool is_constant (void) const
+    {
+      return true;
+    }
+    bool is_defined (void) const
+    {
+      return true;
+    }
+
+    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+
+    void print (std::ostream & os, bool pr_as_read_syntax = false)
+    {
+      os << "CvVideoWriter_FFMPEG:" << std::endl;
+      os << "  ok                      = " << ok << std::endl;
+      os << "  frame_width             = " << frame_width << std::endl;
+      os << "  frame_height            = " << frame_height << std::endl;
+      os << "  frame_idx               = " << frame_idx << std::endl;
+
+    // FIXME: add more properies
+    }
 };
 
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(CvVideoWriter_FFMPEG, "CvVideoWriter_FFMPEG", "CvVideoWriter_FFMPEG");
+
+CvVideoWriter_FFMPEG::CvVideoWriter_FFMPEG ()
+  : octave_base_value () { init (); };
+
 static const char * icvFFMPEGErrStr(int err)
 {
 #if LIBAVFORMAT_BUILD >= CALC_FFMPEG_VERSION(53, 2, 0)
@@ -1465,6 +1552,7 @@
 
 void CvVideoWriter_FFMPEG::init()
 {
+    av_register_all();
     fmt = 0;
     oc = 0;
     outbuf = 0;
@@ -1994,7 +2082,7 @@
 {
     InternalFFMpegRegister::init();
     CV_CODEC_ID codec_id = CV_CODEC(CODEC_ID_NONE);
-    int err, codec_pix_fmt;
+    int codec_pix_fmt;
     double bitrate_scale = 1;
 
     close();
@@ -2273,14 +2361,14 @@
     c->bit_rate = (int)lbit_rate;
 
     /* open the codec */
-    if ((err=
+    if ((global_err=
 #if LIBAVCODEC_VERSION_INT >= ((53<<16)+(8<<8)+0)
          avcodec_open2(c, codec, NULL)
 #else
          avcodec_open(c, codec)
 #endif
          ) < 0) {
-        fprintf(stderr, "Could not open codec '%s': %s\n", codec->name, icvFFMPEGErrStr(err));
+        fprintf(stderr, "Could not open codec '%s': %s\n", codec->name, icvFFMPEGErrStr(global_err));
         return false;
     }
 
@@ -2331,12 +2419,12 @@
 
 #if LIBAVFORMAT_BUILD >= CALC_FFMPEG_VERSION(52, 111, 0)
     /* write the stream header, if any */
-    err=avformat_write_header(oc, NULL);
+    global_err=avformat_write_header(oc, NULL);
 #else
-    err=av_write_header( oc );
+    global_err=av_write_header( oc );
 #endif
 
-    if(err < 0)
+    if(global_err < 0)
     {
         close();
         remove(filename);
@@ -2666,12 +2754,12 @@
     if (!(fmt_->flags & AVFMT_NOFILE))
     {
         #if LIBAVFORMAT_BUILD < CALC_FFMPEG_VERSION(53, 2, 0)
-            int err = url_fopen(&oc_->pb, fileName, URL_WRONLY);
+            global_err = url_fopen(&oc_->pb, fileName, URL_WRONLY);
         #else
-            int err = avio_open(&oc_->pb, fileName, AVIO_FLAG_WRITE);
+            global_err = avio_open(&oc_->pb, fileName, AVIO_FLAG_WRITE);
         #endif
 
-        if (err != 0)
+        if (global_err != 0)
             return false;
     }
 
@@ -2788,8 +2876,6 @@
 
 bool InputMediaStream_FFMPEG::open(const char* fileName, int* codec, int* chroma_format, int* width, int* height)
 {
-    int err;
-
     ctx_ = 0;
     video_stream_id_ = -1;
     memset(&pkt_, 0, sizeof(AVPacket));
@@ -2809,19 +2895,19 @@
     #endif
 
     #if LIBAVFORMAT_BUILD >= CALC_FFMPEG_VERSION(53, 6, 0)
-        err = avformat_open_input(&ctx_, fileName, 0, 0);
+        global_err = avformat_open_input(&ctx_, fileName, 0, 0);
     #else
-        err = av_open_input_file(&ctx_, fileName, 0, 0, 0);
+        global_err = av_open_input_file(&ctx_, fileName, 0, 0, 0);
     #endif
-    if (err < 0)
+    if (global_err < 0)
         return false;
 
     #if LIBAVFORMAT_BUILD >= CALC_FFMPEG_VERSION(53, 6, 0)
-        err = avformat_find_stream_info(ctx_, 0);
+        global_err = avformat_find_stream_info(ctx_, 0);
     #else
-        err = av_find_stream_info(ctx_);
+        global_err = av_find_stream_info(ctx_);
     #endif
-    if (err < 0)
+    if (global_err < 0)
         return false;
 
     for (unsigned int i = 0; i < ctx_->nb_streams; ++i)
